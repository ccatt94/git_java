****음의 정수를 표현하는 방법
 
양의 정수 표현법 기반으로 음의 정수를 표현하여
부호 비트만 바꿔서 더하면 0이 나오지 않음

-----> 2의 보수를 이용하여 음의 정수를 만듦

- 양의 정수 -> 2진수로 표현 ->  1의 보수로 바꿔서 1을 더하면 음의 정수로 바꿀 수 있다.




**** 실수 표현 방식

**고정 소수점
- 단점 소수점 표현시 실수의 표현 범위가 좁아 큰 실수 표현 어려움 , 비트수 정해져있음

정수를 표현하는 비트와 소수를 표현하는 비트수를 미리 정하고(고정) 해당 비트만을 활용하여 실수를 표현

처음 1비트는 양/음수 표현하는 부호
15비트 -  정수부
16비트 - 소수부
정수부와 소수부의 경계를 소수점 위치라 생각하고 2진수 변환된 수를 자리에 그대로 넣음 남은자리는 0으로 채움

**부동 소수점
-  부호 지수 가수 로 표현

실수를 부호 가수 지수 형태로 바꿈
장점 - 실수의 표현범위 넓어짐 대신 오차 범위도 넓어짐



정수와 실수의 데이터 타입이 나눠진 이유
- 정수와 실수를 2진수로 표현하기 위해서 컴퓨터의 연산 방법이 다름

정수 - 2의 보수로 계산 / 실수 - 부동 소수점 방식





***** cpu가 연산은 int형으로만 함
jvm 32bit이기때문 int가 가장 속도 빠름

short형이면 16bit인데 32bit를 맞춰야되어
남는 16 bit에 0을 실어 보내야 처리가 가능
- 소프트웨어

int 이하 자료형에 대해서는 소프트웨어적으로(내부적으로) 연산(+-*/) 지원 안함 - 하려면 int형으로 형변환해야 됨

= cpu 32bit라는 선이 32개여서 int형으로 처리하도록 설계를 먼저 함


32bit의 기준 =  cpu의 메모리 주소를 한번에 보낼 수 있는 값(최대 메모리 사용가능 2의32승까지)

32bit의 최대 사용 가능 메모리 양 = 4GB

64bit 최대 사용 가능 메모리 양 = 512G




***** 자료형 char 이해

숫자로 저장

아스키코드 + 유니코드 로 저장



**** 글자가 깨지는 원리 - 두 개의 코드 체계가 달라서
encording할때 

UTF-8
디폴트로 정해진 코드 X-949 = MS에서 만든 코드 기준




**** 상수(변하지 않는 수)

변수와 반댓말
final 사용시 상수명을 대문자로 적음

**** 표기법★
Camel case 낙타 표기법 - 클래스 이름
- 단어 첫 글자 대문자로 ex) CharMain
Snake case 뱀 표기법 - 상수 이름
- 띄어쓰기 언더바 이용  ex) MAX_SIZE


일반 변수 이름 시작은 소문자로




***** 변수와 상수 차이

일반 변수 - 메모리에 넣을 수 있는 값이 변할 수 있음
상수 - 한번 값이 할당되면 바꿀 수 없음



**** 초기화 이해

초기화 = 값을 처음 할당함
상수는 초기화 후 또 할당할 경우 에러 발생



**** 상수 응용
바뀌지 않는 수는 상수로 처리시 앞에 final 붙이기
ex) 원주율



































