**** OOP(객체지향언어) <-> 절차지향언어(C언어)

1. 정보은닉
2. 상속
3. 다형성(polymorphism)
4. 캡슐화
5. 클래스
6. 추상화



함부로 접근 가능하기 때문에 정보은닉 필요
- 인스턴스 변수를 보호 하기 위해


**** 정보 은닉 위해 private 선언

access modifier = 접근 제한자(변수에 사용)

클래스 안에 있는 인스턴스 변수에 private 붙일 경우
- 메인에서 값을 바로 대입했을때 컴파일 오류가 일어나면서 값이 저장되지 않음


** private 선언 시
- 해당 변수가 있는  클래스에서만 사용 가능

** public 선언 시
- 언제 어디서든 접근 가능

** default 선언시
- 굳이 써주지 않음
- 같은 패키지 내에서만 접근 가능

** protected 선언시
- 패키지와 상관없이 상속 했을때 자식까지 접근 가능


객체 생성 이유 - 함수(기능) 사용하기 위해




















